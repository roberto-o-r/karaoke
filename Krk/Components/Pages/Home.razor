@page "/"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Krk.Models
@using Krk.Services
@using Newtonsoft.Json
@inject SongService SongService
@inject ProtectedLocalStorage ProtectedLocalStore

<PageTitle>Karaoke</PageTitle>

<h1>Karaoke entre Amigos</h1>

@if (string.IsNullOrEmpty(userName))
{
    <div class="form-group mb-3">
        <label class="mb-3">¡Hola! Ingresa tu nombre para comenzar</label>
        <div class="input-group">
            <input type="text" class="form-control" @bind="userNameInput">
            <button class="btn btn-outline-secondary" type="button" id="button-addon2"
                @onclick="SaveUserName">Guardar</button>
        </div>
    </div>
}
else
{
    <div class="form-group mb-3">
        <label for="searchInput" class="mb-3">¿Cuál vas a cantar@(userName != null ? $" {userName}" : "")?</label>
        <div class="input-group">
            <input type="text" class="form-control" @bind="searchTermInput">
            <button class="btn btn-outline-secondary" type="button" id="button-addon2"
                @onclick="SearchSongs">Buscar</button>
        </div>
        <small id="help" class="form-text text-muted">Busca por artista o por canción.</small>
    </div>

    @if (songs == null)
    {
        <p><em>Cargando repertorio...</em></p>
    }
    else
    {
        <p>Total: @songs.Count()</p>
        <table class="table">
            <thead>
                <tr>
                    <th>Intérprete</th>
                    <th>Canción</th>
                    <th style="width:24px; padding-left:0px; padding-right:0px;"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var song in songs)
                {
                    <tr>
                        <td>@song.Artist</td>
                        <td>@song.Name</td>
                        @if (string.IsNullOrEmpty(userName))
                        {
                            <td>
                                <i class="bi bi-plus-circle cursor-pointer" @onclick="() => AddSongToQueue(song)"></i>
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private List<Song>? songs;
    private List<Song>? queue;
    private string? userName = "";
    private string searchTermInput = "";
    private string? userNameInput = "";

    protected override async Task OnInitializedAsync()
    {
        var userNameStore = await ProtectedLocalStore.GetAsync<string>("userName");
        if (userNameStore.Success)
        {
            userName = userNameStore.Value;
        }
        SearchSongs();
        await GetUserQueue();
    }

    private void SearchSongs()
    {
        songs = SongService.SearchSongs(searchTermInput);
    }

    private async Task SaveUserName()
    {
        if (!string.IsNullOrEmpty(userNameInput))
        {
            await ProtectedLocalStore.SetAsync("userName", userNameInput);
            userName = userNameInput;
        }
    }

    private async Task AddSongToQueue(Song song)
    {
        if (!string.IsNullOrEmpty(userName))
        {
            await SongService.AddSongToQueue(userName, song);
        }
    }

    private async Task GetUserQueue()
    {
        if (!string.IsNullOrEmpty(userName))
        {
            queue = await SongService.GetUserQueue(userName);
        }
    }
}
