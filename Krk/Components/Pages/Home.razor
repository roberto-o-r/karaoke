@page "/"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Krk.Models
@using Krk.Services
@using Newtonsoft.Json
@inject SongService SongService
@inject FavoritesService FavoritesService
@inject ProtectedLocalStorage ProtectedLocalStore

<PageTitle>Karaoke</PageTitle>

<h1>Karaoke entre Amigos</h1>

@if (isLoading)
{
    <p><em>Cargando...</em></p>
    return;
}

@if (string.IsNullOrEmpty(user))
{
    <div class="form-group mb-3">
        <label class="mb-3">¡Hola! Ingresa tu nombre de usuario para comenzar</label>
        <div class="input-group">
            <input type="text" class="form-control" @bind="userInput">
            <button class="btn btn-outline-secondary" type="button" id="button-addon2" @onclick="SaveUser">Guardar</button>
        </div>
    </div>
}
else
{
    <div class="form-group mb-3">
        <label for="searchInput" class="mb-3">¿Cuál vas a cantar@(user != null ? $" {user}" : "")?</label>
        <div class="input-group">
            <input type="text" class="form-control" @bind="searchTermInput">
            <button class="btn btn-outline-secondary" type="button" id="button-addon2"
                @onclick="SearchSongs">Buscar</button>
        </div>
        <small id="help" class="form-text text-muted">Busca por artista o por canción.</small>
    </div>

    @if (songs == null)
    {
        <p><em>Cargando repertorio...</em></p>
    }
    else
    {
        <p>Total: @total - Página: @pageNumber</p>
        <div>
            <table class="table">
                <thead>
                    <tr>
                        <th>Intérprete</th>
                        <th>Canción</th>
                        <th style="width: 24px; padding-left:0px; padding-right:0px;"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var song in songs)
                    {
                        <tr>
                            <td class="text-break">@song.Artist</td>
                            <td class="text-break">@song.Name</td>
                            @if (!string.IsNullOrEmpty(user))
                            {
                                <td>
                                    @if (queue != null && queue.Any(x => x.Song.Artist == song.Artist && x.Song.Name == song.Name))
                                    {
                                        <i class="bi bi-dash-circle-fill cursor-pointer h4 mb-0" @onclick="() => RemoveSongFromQueue(song)"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-plus-circle cursor-pointer bi-2x h4 mb-0" @onclick="() => AddSongToQueue(song)"></i>
                                    }
                                    @if (favorites != null && favorites.Any(x => x.Song.Artist == song.Artist && x.Song.Name == song.Name))
                                    {
                                        <i class="bi bi-heart-fill cursor-pointer h4 mb-0" @onclick="() => RemoveSongFromFavorites(song)"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-heart cursor-pointer bi-2x h4 mb-0" @onclick="() => AddSongToFavorites(song)"></i>
                                    }
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="d-flex justify-content-center align-items-center m-3">
            <button class="btn btn-outline-primary" type="button" @onclick="PreviousPage">
                <i class="bi bi-arrow-left-circle-fill"></i>
            </button>
            <span class="m-2">Total: @total - Página: @pageNumber</span>
            <button class="btn btn-outline-primary" type="button" @onclick="NextPage">
                <i class="bi bi-arrow-right-circle-fill"></i>
            </button>
        </div>
    }
}

@code {
    private bool isLoading = true;
    private List<Song>? songs;
    private List<QueueItem> queue = new List<QueueItem>();
    private List<Favorite> favorites = new List<Favorite>();
    private string? user = "";
    private string searchTermInput = "";
    private string? userInput = "";
    private int pageNumber = 1;
    private int total = 0;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        var userStore = await ProtectedLocalStore.GetAsync<string>("User");
        if (userStore.Success)
        {
            user = userStore.Value;
        }
        await SearchSongs();
        isLoading = false;
    }

    private async Task SearchSongs()
    {
        songs = SongService.SearchSongs(searchTermInput, pageNumber);
        total = SongService.GetTotalSongs();
        await GetUserQueue();
        await GetFavorites();
    }

    private async Task SaveUser()
    {
        if (!string.IsNullOrEmpty(userInput))
        {
            await ProtectedLocalStore.SetAsync("User", userInput);
            user = userInput;
            await SearchSongs();
        }
    }

    private async Task AddSongToQueue(Song song)
    {
        if (!string.IsNullOrEmpty(user))
        {
            await SongService.AddSongToQueue(user, song);
            await SearchSongs();
        }
    }

    private async Task RemoveSongFromQueue(Song song)
    {
        if (!string.IsNullOrEmpty(user))
        {
            var queueItem = queue.FirstOrDefault(x => x.Song.Artist == song.Artist && x.Song.Name == song.Name);
            if (queueItem != null)
            {
                await SongService.RemoveSongFromQueue(queueItem.Id);
                await SearchSongs();
            }
        }
    }

    private async Task GetUserQueue()
    {
        if (!string.IsNullOrEmpty(user))
        {
            queue = await SongService.GetUserQueue(user);
        }
    }

    private async Task AddSongToFavorites(Song song)
    {
        if (!string.IsNullOrEmpty(user))
        {
            await FavoritesService.AddSongToFavorites(user, song);
            await SearchSongs();
        }
    }

    private async Task RemoveSongFromFavorites(Song song)
    {
        if (!string.IsNullOrEmpty(user))
        {
            var favorite = favorites.FirstOrDefault(x => x.Song.Artist == song.Artist && x.Song.Name == song.Name);
            if (favorite != null)
            {
                await FavoritesService.RemoveSongFromFavorites(favorite.Id);
                await SearchSongs();
            }
        }
    }

    private async Task GetFavorites()
    {
        if (!string.IsNullOrEmpty(user))
        {
            favorites = await FavoritesService.GetUserFavorites(user);
        }
    }

    private async Task PreviousPage()
    {
        if (pageNumber > 1)
        {
            pageNumber--;
            await SearchSongs();
        }
    }

    private async Task NextPage()
    {
        var isLastPage = songs?.Count < 500;
        if(!isLastPage)
        {
            pageNumber++;
            await SearchSongs();
        }
    }
}
