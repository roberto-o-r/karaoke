@page "/"
@inject Karaoke.Client.Local.FavoriteService FavoriteService
@inject HttpClient Http
@using System.Globalization
@using System.Timers;
@using Karaoke.Shared

<h1>Karaoke entre Amigos</h1>

<div class="form-group">
    <label for="searchInput">¿Cuál vas a cantar?</label>
    <input type="text" class="form-control" id="searchInput" aria-describedby="help" @oninput="SearchChanged">
    <small id="help" class="form-text text-muted">Busca por artista o por canción.</small>
</div>

@if (songs == null)
{
    <p><em>Cargando repertorio...</em></p>
}
else
{
    <p>Total: @filteredSongs.Count()</p>
    <Table Songs="filteredSongs" OnFavorite="OnFavorite"></Table>
}

@code {
    private Timer debounceTimer;
    private List<Song> songs;
    private List<Song> filteredSongs;
    private List<Song> favorites;
    private string searchText;

    protected override async Task OnInitializedAsync()
    {
        songs = await Http.GetFromJsonAsync<List<Song>>("Songs");
        favorites = await FavoriteService.GetFavorites();
        foreach (var favorite in favorites)
        {
            songs.First(s => s.Artist == favorite.Artist && s.Name == favorite.Name).Favorite = true;
        }
        filteredSongs = songs;

        debounceTimer = new System.Timers.Timer(500);
        debounceTimer.Elapsed += OnUserFinish;
        debounceTimer.AutoReset = false;
    }

    private void SearchChanged(ChangeEventArgs e)
    {
        debounceTimer.Stop();
        debounceTimer.Start();

        searchText = e.Value.ToString();
    }

    private void OnUserFinish(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(() => { SearchSongs(); });
    }

    private void SearchSongs()
    {
        filteredSongs = songs;
        var currentSearch = searchText.ToLower().Trim();

        if (!string.IsNullOrEmpty(currentSearch))
        {
            var compareInfo = CultureInfo.InvariantCulture.CompareInfo;
            filteredSongs = filteredSongs.Where(s => compareInfo.IndexOf(s.Artist.ToLower(), currentSearch, CompareOptions.IgnoreNonSpace) > -1 ||
                compareInfo.IndexOf(s.Name.ToLower(), currentSearch, CompareOptions.IgnoreNonSpace) > -1).ToList();
        }

        base.StateHasChanged();
    }

    private async void OnFavorite(Song song)
    {
        song.Favorite = !song.Favorite;
        songs.Find(s => s.Artist == song.Artist && s.Name == song.Name).Favorite = song.Favorite;
        filteredSongs.Find(s => s.Artist == song.Artist && s.Name == song.Name).Favorite = song.Favorite;

        if (song.Favorite)
        {
            await FavoriteService.AddFavorite(song);
        }
        else
        {
            await FavoriteService.RemoveFavorite(song);
        }
    }
}
